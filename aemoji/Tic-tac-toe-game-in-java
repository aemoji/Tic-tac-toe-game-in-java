import java.util.*;

public class Tacgame{
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		char[][] board={ 
		                   {' ','|',' ','|',' '}, 
		                   {'-','+','-','+','-'}, 
		                   {' ','|',' ','|',' '}, 
		                   {'-','+','-','+','-'}, 
		                   {' ','|',' ','|',' '} 
		               };

		
		printBoard(board);
		int t=5;
		int cnt=0;
		while(t-->0){
		System.out.println("Enter position");
		int pos=sc.nextInt();
		fillBoard(board,pos);
		printBoard(board);

        if(wincheck(board)){ System.out.println("player win"); break;}
        if(wincheckcpu(board)){ System.out.println("cpu win"); break;}

		while(true)
		   {
		      Random ran=new Random();
		      int cpupos=ran.nextInt(9)+1;
		      if(check(board,cpupos)==true)
		      {
		         fillBoardcpu(board,cpupos);
		         printBoard(board);
		         cnt++;
		         break;
	          }
	         if(cnt>=4) break;
	       }

	    if(wincheck(board)){ System.out.println("player win"); break;}
        if(wincheckcpu(board)){ System.out.println("cpu win"); break;}
	    
	    if(t==0) System.out.println("Game Over");
	    
	}
		


		
	}

	public static void printBoard(char[][] board){
		

	  for(char[] row:board)
		{
		   for(char s:row)
		      {
		        System.out.print(s);
		      }
		        System.out.println();
		}
		System.out.println("***************");
	}
 
 public static void fillBoard(char[][] board,int pos){

 	switch(pos){
 		case 1: board[0][0]='x';
 		        break;
 		case 2: board[0][2]='x';
 		        break; 
 		case 3: board[0][4]='x';
 		        break;
        case 4: board[2][0]='x';
 		        break;
 		case 5: board[2][2]='x';
 		        break; 
 		case 6: board[2][4]='x';
 		        break;
        case 7: board[4][0]='x';
 		        break;
 		case 8: board[4][2]='x';
 		        break; 
 		case 9: board[4][4]='x';
 		        break;
 	}
 }
  public static void fillBoardcpu(char[][] board,int pos){

 	switch(pos){
 		case 1: board[0][0]='o';
 		        break;
 		case 2: board[0][2]='o';
 		        break; 
 		case 3: board[0][4]='o';
 		        break;
        case 4: board[2][0]='o';
 		        break;
 		case 5: board[2][2]='o';
 		        break; 
 		case 6: board[2][4]='o';
 		        break;
        case 7: board[4][0]='o';
 		        break;
 		case 8: board[4][2]='o';
 		        break; 
 		case 9: board[4][4]='o';
 		        break;
 	}
 }
 static boolean check(char[][] board,int pos){
 	boolean ok=false;
 	
 		if(pos==1)
 			{ 
 			  if(board[0][0]==' ')  ok=true;
 		    }
 		if(pos==2)
 			{
 			  if(board[0][2]==' ')  ok=true;
 		    }
 		if(pos==3)
 			{
 			  if(board[0][4]==' ')  ok=true;
 		    }
        if(pos==4)
        	{
        	  if(board[2][0]==' ')  ok=true;
 		    }
 		if(pos==5)
 			{ 
 			  if(board[2][2]==' ')  ok=true;
            }
 		if(pos==6)
 			{
 			  if(board[2][4]==' ')  ok=true;
            }
       if(pos==7)
       	    {
       		  if(board[4][0]==' ')  ok=true;
            }
 		if(pos==8)
 			{
 			  if(board[4][2]==' ')  ok=true;
            }
 		if(pos==9)
 			{
 			  if(board[4][4]==' ')  ok=true;
            }

 		        return ok ;


}

static boolean wincheck(char[][] board){
  if(board[0][0]=='x' && board[0][2]=='x' && board[0][4]=='x') return true;
  if(board[2][0]=='x' && board[2][2]=='x' && board[2][4]=='x') return true;
  if(board[4][0]=='x' && board[4][2]=='x' && board[4][4]=='x') return true;

  if(board[0][0]=='x' && board[2][0]=='x' && board[4][0]=='x') return true;
  if(board[0][2]=='x' && board[2][2]=='x' && board[4][2]=='x') return true;
  if(board[0][4]=='x' && board[2][4]=='x' && board[4][4]=='x') return true;

  if(board[0][0]=='x' && board[2][2]=='x' && board[4][4]=='x') return true;
  if(board[4][0]=='x' && board[2][2]=='x' && board[0][4]=='x') return true;

       return false;
}

static boolean wincheckcpu(char[][] board){
	  if(board[0][0]=='o' && board[0][2]=='o' && board[0][4]=='o') return true;
  if(board[2][0]=='o' && board[2][2]=='o' && board[2][4]=='o') return true;
  if(board[4][0]=='o' && board[4][2]=='o' && board[4][4]=='o') return true;

  if(board[0][0]=='o' && board[2][0]=='o' && board[4][0]=='o') return true;
  if(board[0][2]=='o' && board[2][2]=='o' && board[4][2]=='o') return true;
  if(board[0][4]=='o' && board[2][4]=='o' && board[4][4]=='o') return true;

  if(board[0][0]=='o' && board[2][2]=='o' && board[4][4]=='o') return true;
  if(board[4][0]=='o' && board[2][2]=='o' && board[0][4]=='o') return true;

       return false;
}
}

/*
position example
1|2|3
-+-+-
4|5|6
-+-+-
7|8|9
not enter position value which is already occupied
 */
